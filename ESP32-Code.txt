#include <WiFi.h>
#include <WiFiClient.h>
#include <WiFiAP.h>

#define LED_BUILTIN 19

const char *ssid = "abhash_LED";
const char *password = "abhash123";

WiFiServer server(80);

void setup() {
  pinMode(LED_BUILTIN, OUTPUT);

  Serial.begin(115200);
  Serial.println();
  Serial.println("Configuring access point...");

  if (!WiFi.softAP(ssid, password)) {
    log_e("Soft AP creation failed.");
    while(1);
  }

  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  server.begin();

  Serial.println("Server started");
}

void loop() {
  WiFiClient client = server.available();

  if (client) {
    Serial.println("New Client.");
    String currentLine = "";
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        Serial.write(c);
        if (c == '\n') {
          if (currentLine.length() == 0) {
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            
            // Enhanced HTML content with increased font and icon size
            client.println("<html><head><style>");
            client.println("body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; text-align: center; background-color: #f4f4f4; }");
            client.println(".container { max-width: 600px; margin: 0 auto; padding: 20px; background-color: #ffffff; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); }");
            client.println("h1 { color: #333333; font-size: 24px; }");
            client.println(".switch { position: relative; display: inline-block; width: 80px; height: 40px; }");
            client.println(".slider { position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: #ccc; border-radius: 40px; cursor: pointer; }");
            client.println(".slider:before { position: absolute; content: ''; height: 32px; width: 32px; left: 4px; bottom: 4px; background-color: white; border-radius: 50%; transition: 0.4s; }");
            client.println("input:checked + .slider { background-color: #4CAF50; }");
            client.println("input:checked + .slider:before { transform: translateX(32px); }");
            client.println("</style></head><body>");
            
            client.println("<div class=\"container\">");
            client.print("<h1>LED Status: ");
            client.print(digitalRead(LED_BUILTIN) == HIGH ? "ON" : "OFF");
            client.println("</h1>");
            
            client.println("<label class=\"switch\">");
            client.print("<input type=\"checkbox\" id=\"ledCheckbox\" onchange=\"toggleLED(this)\" ");
            client.print(digitalRead(LED_BUILTIN) == HIGH ? "checked" : "");
            client.println(">");
            client.println("<span class=\"slider\"></span>");
            client.println("</label>");
            
            client.println("<script>");
            client.println("function toggleLED(element) {");
            client.println("  var xhr = new XMLHttpRequest();");
            client.println("  xhr.open('GET', '/toggle', true);");
            client.println("  xhr.send();");
            client.println("}");
            client.println("</script>");
            
            client.println("</div>");
            client.println("</body></html>");
            
            client.println();
            break;
          } else {
            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }

        if (currentLine.endsWith("GET /toggle")) {
          digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));
        }
      }
    }
    client.stop();
    Serial.println("Client Disconnected.");
  }
}
